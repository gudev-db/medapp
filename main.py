import streamlit as st
import pandas as pd
import PyPDF2
import io
import os
import google.generativeai as genai
from datetime import datetime

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Health Report Assistant",
    page_icon="‚öïÔ∏è"
)

# CSS personalizado
st.markdown("""
<style>
    /* Fundo escuro para melhor contraste */
    html, body, .main, .block-container {
        background-color: #f0f2f6 !important;
    }
    
    /* Estilos para abas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        flex-wrap: nowrap;
        padding-bottom: 5px;
    }
    
    .stTabs [data-baseweb="tab"] {
        padding: 8px 16px;
        border-radius: 4px 4px 0 0;
        white-space: nowrap;
        font-size: 14px;
        transition: all 0.2s;
        background-color: #e0e0e0;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #4a6fa5 !important;
        color: white !important;
    }
    
    /* Cards de informa√ß√£o */
    .info-card {
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .warning-card {
        border-left: 4px solid #ff6b6b;
    }
    
    .recommendation-card {
        border-left: 4px solid #51cf66;
    }
    
    /* Texto */
    .simplified-text {
        font-size: 16px;
        line-height: 1.6;
    }
    
    /* Bot√µes */
    .stButton button {
        background-color: #4a6fa5;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
genai.configure(api_key=gemini_api_key)
modelo_texto = genai.GenerativeModel("gemini-1.5-flash")

# Carregar banco de dados de medicamentos (simulado)
@st.cache_data
def load_medications():
    # Em um app real, isso viria de um CSV ou banco de dados
    data = {
        "Nome": ["Paracetamol", "Ibuprofeno", "Omeprazol", "Amoxicilina", "Dipirona"],
        "Descri√ß√£o": [
            "Analg√©sico e antit√©rmico para dor e febre",
            "Anti-inflamat√≥rio para dores e inflama√ß√µes",
            "Protetor g√°strico para azia e gastrite",
            "Antibi√≥tico para infec√ß√µes bacterianas",
            "Analg√©sico e antit√©rmico para dores moderadas"
        ],
        "Recomenda√ß√µes": [
            "Tomar 1 comprimido de 500mg a cada 6 horas, m√°ximo 4g/dia",
            "Tomar 1 comprimido de 400mg a cada 8 horas com alimentos",
            "Tomar 1 c√°psula de 20mg pela manh√£ em jejum",
            "Tomar conforme prescri√ß√£o m√©dica (geralmente a cada 8 ou 12 horas)",
            "Tomar 1 comprimido de 500mg a cada 6 horas se necess√°rio"
        ],
        "Indica√ß√µes": [
            "Dores leves a moderadas, febre",
            "Dores musculares, inflama√ß√µes, c√≥licas",
            "Azia, gastrite, refluxo",
            "Infec√ß√µes bacterianas (ouvido, garganta, etc.)",
            "Dores moderadas, febre"
        ]
    }
    return pd.DataFrame(data)

medications_db = load_medications()

# Fun√ß√£o para extrair texto de PDF
def extract_text_from_pdf(uploaded_file):
    pdf_reader = PyPDF2.PdfReader(io.BytesIO(uploaded_file.read()))
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

# Interface principal
st.title("‚öïÔ∏è Health Report Assistant")
st.caption("Entenda seus exames m√©dicos e cuide melhor da sua sa√∫de")

uploaded_file = st.file_uploader("Carregue seu relat√≥rio m√©dico (PDF)", type="pdf")

if uploaded_file is not None:
    # Extrair texto do PDF
    report_text = extract_text_from_pdf(uploaded_file)
    
    # Armazenar em session state para uso nas abas
    st.session_state.report_text = report_text
    
    # Criar abas
    tabs = st.tabs(["üìã Vis√£o Geral", "üí¨ Chat com Relat√≥rio", "üë©‚Äç‚öïÔ∏è Recomenda√ß√µes de Sa√∫de", "üíä Medicamentos Indicados"])
    
    with tabs[0]:
        st.header("üìã Vis√£o Simplificada do Relat√≥rio")
        
        if 'simplified_report' not in st.session_state:
            with st.spinner('Processando relat√≥rio...'):
                prompt = f"""
                Voc√™ √© um assistente m√©dico que ajuda pacientes a entenderem seus relat√≥rios m√©dicos. 
                Simplifique este relat√≥rio usando linguagem clara e acess√≠vel:

                **Relat√≥rio Original:**
                {report_text}

                **Instru√ß√µes:**
                1. Identifique os exames realizados
                2. Destaque os resultados mais relevantes
                3. Explique os termos t√©cnicos em linguagem simples
                4. Organize por se√ß√µes (hemograma, colesterol, etc.)
                5. Mantenha todas as informa√ß√µes importantes

                **Formato:**
                - T√≠tulos claros para cada se√ß√£o
                - Listas com marcadores para facilitar
                - Destaque valores fora do normal
                - Evite jarg√µes m√©dicos
                """
                
                response = modelo_texto.generate_content(prompt)
                st.session_state.simplified_report = response.text
        
        st.markdown(f'<div class="info-card simplified-text">{st.session_state.simplified_report}</div>', unsafe_allow_html=True)
        
        # Bot√£o para download do relat√≥rio simplificado
        st.download_button(
            "‚¨áÔ∏è Baixar Relat√≥rio Simplificado",
            st.session_state.simplified_report,
            file_name=f"relatorio_simplificado_{datetime.now().strftime('%Y%m%d')}.txt"
        )
    
    with tabs[1]:
        st.header("üí¨ Chat com seu Relat√≥rio")
        st.write("Fa√ßa perguntas sobre seu relat√≥rio m√©dico")
        
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        if prompt := st.chat_input("O que voc√™ gostaria de saber sobre seu relat√≥rio?"):
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            with st.chat_message("assistant"):
                with st.spinner('Analisando seu relat√≥rio...'):
                    chat_prompt = f"""
                    Voc√™ √© um assistente m√©dico ajudando um paciente a entender seu relat√≥rio. 
                    O relat√≥rio cont√©m: {report_text[:10000]}...
                    
                    Pergunta do paciente: {prompt}
                    
                    Responda de forma:
                    - Clara e simples
                    - Emp√°tica e acolhedora
                    - T√©cnica quando necess√°rio, mas explicando os termos
                    - Inclua recomenda√ß√µes pr√°ticas quando aplic√°vel
                    - Se n√£o souber, diga que n√£o pode responder e sugira consultar o m√©dico
                    """
                    
                    response = modelo_texto.generate_content(chat_prompt)
                    st.markdown(response.text)
            
            st.session_state.messages.append({"role": "assistant", "content": response.text})
    
    with tabs[2]:
        st.header("üë©‚Äç‚öïÔ∏è Pontos de Aten√ß√£o √† Sa√∫de")
        
        if 'health_highlights' not in st.session_state:
            with st.spinner('Identificando pontos importantes...'):
                prompt = f"""
                Analise este relat√≥rio m√©dico e identifique:

                **Relat√≥rio:**
                {report_text}

                **Itens a Identificar:**
                1. Valores fora da normalidade (destacar e explicar)
                2. Poss√≠veis condi√ß√µes sugeridas pelos resultados
                3. Recomenda√ß√µes de estilo de vida
                4. Sinais que exigem acompanhamento m√©dico
                5. Exames que podem precisar de repeti√ß√£o

                **Formato:**
                - Lista priorizada por import√¢ncia
                - Linguagem simples e direta
                - Destaque urg√™ncias com ‚ùó
                - Inclua valores de refer√™ncia quando relevante
                """
                
                response = modelo_texto.generate_content(prompt)
                st.session_state.health_highlights = response.text
        
        st.markdown(f'<div class="info-card warning-card">{st.session_state.health_highlights}</div>', unsafe_allow_html=True)
        
        # Gerar recomenda√ß√µes adicionais
        if 'health_recommendations' not in st.session_state:
            with st.spinner('Gerando recomenda√ß√µes personalizadas...'):
                prompt = f"""
                Baseado nestes pontos de aten√ß√£o:
                {st.session_state.health_highlights}
                
                Crie recomenda√ß√µes pr√°ticas de sa√∫de:
                1. H√°bitos alimentares
                2. Atividade f√≠sica
                3. Monitoramento caseiro
                4. Sinais para procurar m√©dico
                5. Periodicidade de novos exames
                
                Formato:
                - Lista com a√ß√µes concretas
                - Prazo para cada recomenda√ß√£o
                - N√≠vel de prioridade (alta/m√©dia/baixa)
                """
                
                response = modelo_texto.generate_content(prompt)
                st.session_state.health_recommendations = response.text
        
        st.subheader("Recomenda√ß√µes Personalizadas")
        st.markdown(f'<div class="info-card recommendation-card">{st.session_state.health_recommendations}</div>', unsafe_allow_html=True)
    
    with tabs[3]:
        st.header("üíä Medicamentos Potencialmente Indicados")
        st.write("Baseado em seu relat√≥rio, estes medicamentos podem ser relevantes")
        
        # Filtro de busca
        search_term = st.text_input("Buscar medicamento por nome ou condi√ß√£o")
        
        # Filtrar medicamentos
        if search_term:
            filtered_meds = medications_db[
                medications_db['Nome'].str.contains(search_term, case=False) | 
                medications_db['Indica√ß√µes'].str.contains(search_term, case=False)
            ]
        else:
            filtered_meds = medications_db
        
        # Mostrar medicamentos
        for _, med in filtered_meds.iterrows():
            with st.expander(f"**{med['Nome']}** - {med['Descri√ß√£o']}", expanded=False):
                st.write(f"**Indica√ß√µes:** {med['Indica√ß√µes']}")
                st.write(f"**Recomenda√ß√µes de uso:** {med['Recomenda√ß√µes']}")
                st.warning("‚ö†Ô∏è Consulte sempre um m√©dico antes de usar qualquer medicamento")
        
        # Disclaimer importante
        st.error("""
        **Aviso Importante:** 
        Estas sugest√µes s√£o baseadas em informa√ß√µes gerais e n√£o substituem a avalia√ß√£o m√©dica. 
        Nunca tome medicamentos sem orienta√ß√£o profissional.
        """)

else:
    st.info("Por favor, carregue seu relat√≥rio m√©dico em PDF para come√ßar.")
    st.image("https://img.freepik.com/free-vector/medical-report-concept-illustration_114360-1503.jpg", width=400)
